@model COMP4900Project.Models.Content

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
<hr />

<script src="~/scripts/tinymce/tinymce.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script>

    function OCR() {

        var formData = new FormData();
        var uploadField = document.getElementById('ePic');

        if (uploadField.files[0] == undefined) {
            alert("Please select an image file");
        }
        else {
            formData.append("ePic", uploadField.files[0]);

            $.ajax({
                type: 'POST',
                url: '@Url.Action("OCR", "Contents")',
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (Text) {
                    document.getElementById("Text").value = Text;
                    document.getElementById("TextDisplay").innerHTML = Text;
                    tinyMCE.activeEditor.execCommand('mceInsertContent', false, Text);
                },
                complete: function () {

                }
            });
        }

        
    }

    function ISBN() {

        var formData = new FormData();
        var Reference1 = document.getElementById('Reference1').value;
        var pages = document.getElementById('pages').value;
        //var style = document.getElementById('style').value;

        if (!(Reference1.length == 10 || Reference1.length == 13)) {
            alert("Please enter 10 or 13 digit ISBN");
        }
        else {

            var radios = document.getElementsByName('style');
            var radiovalue;
            for (var i = 0, length = radios.length; i < length; i++) {
                if (radios[i].checked) {
                    // do whatever you want with the checked radio
                    //alert(radios[i].value);
                    radiovalue = radios[i].value;
                    // only one radio can be logically checked, don't check the rest
                    //break;
                }
            }

            //var style;
            //if (document.getElementById('cite').checked) {
            //    style = document.getElementById('cite').value;
            //}
            //get the data of the isbn numberm page number, and sylte value
            formData.append("Reference1", Reference1);
            formData.append("pages", pages);
            formData.append("style", radiovalue);
            //ajax post data to the ISBN() method to search the value by isbn return the reference value insert to the Reference box 
            $.ajax({
                type: 'POST',
                url: '@Url.Action("ISBN", "Contents")',
                data: formData,
                cache: false,
                contentType: false,
                processData: false,
                success: function (Reference) {
                    document.getElementById("Reference").value = Reference;
                },
                complete: function () {

                }
            });
        }

        
    }




    var html = '';

    // Initialize your tinyMCE Editor with your preferred options
    tinyMCE.init({
        //your regular init parameters here...
        setup: function (editor) {
            editor.on('init', function () {
                //load your content here!
                tinymce.activeEditor.setContent(html);
                //or
                tinymce.editors[0].setContent(html);

            });
        },
        // Height
        height: "500",
        // General options
        mode: "textareas",
        theme: "modern",
        // Theme options
        theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline," +
          "strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|," +
          "styleselect,formatselect,fontselect,fontsizeselect",
        theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|," +
          "search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|," +
          "link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|," +
          "forecolor,backcolor",
        theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|," +
          "sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen",
        theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|," +
         "styleprops,spellchecker,|,cite,abbr,acronym,del,ins,attribs,|," +
      "visualchars,nonbreaking,template,blockquote,pagebreak,|,insertfile,insertimage",
        theme_advanced_toolbar_location: "top",
        theme_advanced_toolbar_align: "left",
        theme_advanced_statusbar_location: "bottom",
        theme_advanced_resizing: true,

        // Example content CSS (should be your site CSS)
        //content_css: "css/example.css",
    });
</script>

<div style="width: 100%; display: table;">
    <h4>Note and Reference Genereators </h4>
    <br />
    <div style="display: table-row">
        <div class="form-horizontal" style="width: 40%; display: table-cell;">
            <b>Convert Picture Text to Digital Text</b>
            <br />
            <br />
            <div class="form-group">
                <div class="col-md-10">
                    <form enctype="multipart/form-data">
                        <p>Select a File from your PC</p>
                        <input type="file" id="ePic" name="ePic" /><br />
                        <input class="btn btn-default" type="button" value="Convert" onclick="OCR()" />
                    </form>
                </div>
            </div>
        </div>
        <div class="form-horizontal" style="display: table-cell;">

            <form>
                <b>Reference Generator</b>
                <br />
                <br />
                <p>Input the ISBN of the book you wish to Rreference</p>
                <input class="form-control text-box single-line" type="text" id="Reference1" name="Reference1" placeholder="13 digit ISBN code" />
                <br />
                <p>Input the pages of the book you wish to Reference</p>
                <input class="form-control text-box single-line" type="text" id="pages" name="pages" placeholder="Example (120-130)" />
                <br />
                <p>Select Citation Type</p>
                <fieldset id="">
                    <input type="radio" value="APA" name="style" checked> APA<br />
                    <input type="radio" value="MLA" name="style"> MLA
                </fieldset>
                <br />
                <input class="btn btn-default" type="button" value="Generate " onclick="ISBN()" />
            </form>
        </div>
    </div>
</div>



<script>
//validation for the Text AND ISBN box, to make sure not null 
function validateForm() {
    var x = document.getElementById("Text").value;
    if (x == "" || x == null) {
        alert("Please upload and convert an image text");
        return false;
    }
    var y = document.getElementById("Reference").value;
    if (y == "" || y == null) {
        alert("Please generate a reference");
        return false;
    }
    return true;
}
</script>

<form name="myForm" action="/contents/create/" onsubmit="return validateForm()" method="post">

    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Content</h4>
        <hr />

        <!-- This will automatically post to your Index method
        (that is decorated with a HttpPost attribute) -->


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div >
            @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Note)   
                @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
            </div>
        </div>
        <br />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Text, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="hidden" id="Text" name="Text" value="">
                <div id="TextDisplay"></div>
                @*<input name="Text" class="form-control text-box single-line" id="Text" type="text" value="">*@
                @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Reference, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input name="Reference" class="form-control text-box single-line" id="Reference" type="text" value="">
                @Html.ValidationMessageFor(model => model.Reference, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
    @*}*@
</form>
<hr />



    <div>
        @Html.ActionLink("Back to List", "Index", "UserContents")
    </div>
    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
